install.packages("slidify")
install.packages("slidify")
install.packages("ggplot2")
install.packages("devtools")
library(ggplot2)
search()
library(devtools)
search()
install.packages("slidify")
install.packages(c("ggplot2", "devtools"))
install.packages("ggplot2")
install.packages("devtools")
library(ggplot2)
search
search()
library(devtools)
search()
search()
install.packages("ggplot2")
install.packages("devtools")
library(ggplot2)
library(devtools)
search()
install.packages("KernSmooth")
library(KernSmooth)
cube <- function(x, n) {
x^3
}
cube(3)
cube(x)
cube(2)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(1)
f(2)
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
library(datasets)
data(iris)
?iris
mean(iris[iris$Species == "virginica",]$Sepal.Length)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
[1] 126.5779
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
debug(ls)
ls
source("pollutantmean.R")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
source
source()
source(pollutantmean)
source(pollutantmean.R)
return(mean(combined_data));
source(pollutantmean.R)
`228` <- read.csv("~/Documents/IDAMOOC/Lesson 2 - R Programming/Week 2/specdata/228.csv")
View(`228`)
pollutantmean <- function(directory, pollutant, id = 1:332) {
dir
asv
test
R.version.string
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_course_zip("~/Documents/IDAMOOC/swirl_courses-master", multi=TRUE, which_course="Getting_and_Cleaning_Data")
install_course_zip("~/Documents/IDAMOOC/swirl_courses-master.zip", multi=TRUE, which_course="Getting_and_Cleaning_Data")
install_course_zip("~/Documents/IDAMOOC/swirl_courses-master.zip", multi=TRUE, which_course="Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting_and_Cleaning_Data")
install_course_zip("~/Documents/IDAMOOC/swirl_courses-master.zip", multi=TRUE)
swirl()
swirl()
rm(list=ls())
library(swirl)
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
swirl()
install_course_zip("~/Documents/IDAMOOC/master.zip", multi=TRUE, which_course="Getting and Cleaning Data")
swirl()
read.csv
info()
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
v
\library(dplyr)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran <- tbl_df(mydf)
cran <- tbl_df()
cran <- tbl_df(tbl_df)
cran <- tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
(-5:20)
-(5:20)
select()
select(X:size)
select(-5:-20)
select(-5:20)
select(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country
| == "US")
filter(cran, r_version == "3.1.1", country| == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
summarize()
submit()
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
summarize(by_package, mean(size))
reset()
submit()
submit()
by_package
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
v
top_counts
View(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique,
| probs = 0.99)
quantile(pack_sum$unique,probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
view(result3)
script_results_identical('result1'); multi_expr_creates_var('result1')
view()
View()
View(result3)
submit()
script_vals_identical()
submit()
submit()
submit()
library(tidyr)
students()
students
gather()
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
separate()
?separate
separate()
?separate
separate(res, sex_class, c("sex", "class"))
submit()
student3
students3
submit()
?spread
submit()
extract_numeric()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
setwd("~/Documents/IDAMOOC/Lesson5/RepData_PeerAssessment1")
